import os
import json
import openai
import psycopg2
import asyncio
import signal
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv
from pathlib import Path

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
env_path = Path('.env')
if env_path.exists():
    load_dotenv()

openai.api_key = os.getenv("OPENAI_API_KEY")
BOT_TOKEN = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")

if not all([openai.api_key, BOT_TOKEN, DATABASE_URL]):
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
conn = psycopg2.connect(DATABASE_URL)
cur = conn.cursor()

# –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ñ–∏–ª—å–º–æ–≤
cur.execute("""
CREATE TABLE IF NOT EXISTS movies_info (
    id SERIAL PRIMARY KEY,
    original_message TEXT,
    title TEXT,
    year INT,
    genres TEXT,
    actors TEXT,
    kinopoisk_rating FLOAT,
    kinopoisk_link TEXT,
    imdb_rating FLOAT,
    imdb_link TEXT,
    poster_url TEXT,
    added_by TEXT,
    chat_id BIGINT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
""")
conn.commit()

# GPT-–∑–∞–ø—Ä–æ—Å
async def analyze_film_text(text):
    prompt = f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏ –≤—ã–¥–∞–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON. –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∏–ª—å–º–æ–≤, –≤—ã–±–µ—Ä–∏ –ø–µ—Ä–≤—ã–π:

"{text}"

–§–æ—Ä–º–∞—Ç:
{{
"title": "–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞",
"year": 1994,
"genres": ["–∂–∞–Ω—Ä1", "–∂–∞–Ω—Ä2"],
"actors": ["–ê–∫—Ç—ë—Ä 1", "–ê–∫—Ç—ë—Ä 2", "–ê–∫—Ç—ë—Ä 3"],
"kinopoisk_rating": 8.7,
"kinopoisk_link": "https://www.kinopoisk.ru/film/12345/",
"imdb_rating": 8.9,
"imdb_link": "https://www.imdb.com/title/tt1234567/",
"poster_url": "https://somecdn.com/poster.jpg"
}}

–ï—Å–ª–∏ —Ñ–∏–ª—å–º –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω ‚Äî –æ—Ç–≤–µ—Ç—å {{ "error": "not recognized" }}
–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–π–¥–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ IMDb –∏ –ö–∏–Ω–æ–ø–æ–∏—Å–∫.
"""
    try:
        response = await openai.ChatCompletion.acreate(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7
        )
        return json.loads(response.choices[0].message.content.strip())
    except openai.error.OpenAIError as e:
        print(f"OpenAI API error: {e}")
        return {"error": "openai_error"}
    except json.JSONDecodeError as e:
        print(f"JSON parsing error: {e}")
        return {"error": "invalid_json"}
    except Exception as e:
        print(f"Unexpected error: {e}")
        return {"error": "unknown_error"}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def on_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return

    text = update.message.text
    chat = update.effective_chat
    user = update.effective_user

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –æ —Ñ–∏–ª—å–º–∞—Ö
    if not any(k in text.lower() for k in ["—Ñ–∏–ª—å–º", "–∫–∏–Ω–æ", "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å", "—Ä–µ–∫–æ–º–µ–Ω–¥—É—é", "–ø—Ä–µ–¥–ª–∞–≥–∞—é", "—Å–æ–≤–µ—Ç—É—é", "movie", "film"]):
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    status_message = await update.message.reply_text(
        "üé¨ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ...",
        quote=True
    )

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ —á–µ—Ä–µ–∑ GPT
        result = await analyze_film_text(text)

        if "error" in result:
            error_messages = {
                "not_recognized": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–∏–ª—å–º –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏",
                "openai_error": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
                "invalid_json": "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö",
                "unknown_error": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
            }
            await status_message.edit_text(error_messages.get(result["error"], "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"))
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑—É
        cur.execute("""
            INSERT INTO movies_info (
                original_message, title, year, genres, actors,
                kinopoisk_rating, kinopoisk_link,
                imdb_rating, imdb_link, poster_url,
                added_by, chat_id
            ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
        """, (
            text,
            result["title"],
            result["year"],
            ", ".join(result["genres"]),
            ", ".join(result["actors"]),
            result["kinopoisk_rating"],
            result["kinopoisk_link"],
            result["imdb_rating"],
            result["imdb_link"],
            result["poster_url"],
            user.username,
            chat.id
        ))
        conn.commit()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∏–ª—å–º–µ
        caption = f"""üé¨ *{result["title"]}* ({result["year"]})

üë• *–í —Ä–æ–ª—è—Ö:*
{", ".join(result["actors"])}

üé≠ *–ñ–∞–Ω—Ä—ã:*
{", ".join(result["genres"])}

‚≠êÔ∏è *–†–µ–π—Ç–∏–Ω–≥–∏:*
‚Ä¢ –ö–∏–Ω–æ–ü–æ–∏—Å–∫: {result["kinopoisk_rating"]} ‚Äî [–æ—Ç–∫—Ä—ã—Ç—å]({result["kinopoisk_link"]})
‚Ä¢ IMDb: {result["imdb_rating"]} ‚Äî [–æ—Ç–∫—Ä—ã—Ç—å]({result["imdb_link"]})

üéØ –ü—Ä–µ–¥–ª–æ–∂–∏–ª: @{user.username}"""

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
        try:
            await update.message.reply_photo(
                photo=result["poster_url"],
                caption=caption,
                parse_mode="Markdown"
            )
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            await status_message.delete()
        except Exception as e:
            print(f"Error sending photo: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await status_message.edit_text(
                f"{caption}\n\n‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å—Ç–µ—Ä —Ñ–∏–ª—å–º–∞",
                parse_mode="Markdown"
            )

    except Exception as e:
        print(f"Error processing message: {e}")
        await status_message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")

async def shutdown(app):
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    print("Stopping bot...")
    try:
        if hasattr(app, 'running') and app.running:
            await app.stop()
    except Exception as e:
        print(f"Error during shutdown: {e}")
    finally:
        try:
            if 'cur' in globals() and cur:
                cur.close()
            if 'conn' in globals() and conn:
                conn.close()
        except Exception as e:
            print(f"Error closing database connections: {e}")
        print("Bot stopped successfully")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    app = None
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = ApplicationBuilder().token(BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_message))
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
        loop = asyncio.get_event_loop()
        for signal_type in (signal.SIGINT, signal.SIGTERM):
            loop.add_signal_handler(
                signal_type,
                lambda: asyncio.create_task(shutdown(app))
            )
        
        print("Starting bot...")
        await app.initialize()
        await app.start()
        print("Bot is running...")
        await app.run_polling(stop_signals=None)
    except Exception as e:
        print(f"Error starting bot: {e}")
        if app:
            await shutdown(app)
    finally:
        if app:
            await shutdown(app)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("Bot stopped by user")
    except Exception as e:
        print(f"Fatal error: {e}") 