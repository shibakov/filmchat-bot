import os
import json
import openai
import psycopg2
import asyncio
import signal
import logging
import sys
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
env_path = Path('.env')
if env_path.exists():
    load_dotenv()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
openai.api_key = os.getenv("OPENAI_API_KEY")
BOT_TOKEN = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")

if not all([openai.api_key, BOT_TOKEN, DATABASE_URL]):
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ë–î
conn = None
cur = None

async def setup_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    global conn, cur
    try:
        conn = psycopg2.connect(DATABASE_URL)
        cur = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ñ–∏–ª—å–º–æ–≤
        cur.execute("""
        CREATE TABLE IF NOT EXISTS movies_info (
            id SERIAL PRIMARY KEY,
            original_message TEXT,
            title TEXT,
            year INT,
            genres TEXT,
            actors TEXT,
            kinopoisk_rating FLOAT,
            kinopoisk_link TEXT,
            imdb_rating FLOAT,
            imdb_link TEXT,
            poster_url TEXT,
            added_by TEXT,
            chat_id BIGINT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        """)
        conn.commit()
        logger.info("Database connection established and schema created")
    except Exception as e:
        logger.error(f"Database setup error: {e}")
        raise

async def cleanup_database():
    """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    global conn, cur
    try:
        if cur:
            cur.close()
        if conn:
            conn.close()
        logger.info("Database connections closed")
    except Exception as e:
        logger.error(f"Error closing database connections: {e}")

async def analyze_film_text(text: str) -> dict:
    """–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ GPT"""
    prompt = f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏ –≤—ã–¥–∞–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON. –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∏–ª—å–º–æ–≤, –≤—ã–±–µ—Ä–∏ –ø–µ—Ä–≤—ã–π:

"{text}"

–§–æ—Ä–º–∞—Ç:
{{
"title": "–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞",
"year": 1994,
"genres": ["–∂–∞–Ω—Ä1", "–∂–∞–Ω—Ä2"],
"actors": ["–ê–∫—Ç—ë—Ä 1", "–ê–∫—Ç—ë—Ä 2", "–ê–∫—Ç—ë—Ä 3"],
"kinopoisk_rating": 8.7,
"kinopoisk_link": "https://www.kinopoisk.ru/film/12345/",
"imdb_rating": 8.9,
"imdb_link": "https://www.imdb.com/title/tt1234567/",
"poster_url": "https://somecdn.com/poster.jpg"
}}

–ï—Å–ª–∏ —Ñ–∏–ª—å–º –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω ‚Äî –æ—Ç–≤–µ—Ç—å {{ "error": "not recognized" }}
–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–π–¥–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ IMDb –∏ –ö–∏–Ω–æ–ø–æ–∏—Å–∫.
"""
    try:
        response = await openai.ChatCompletion.acreate(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7
        )
        return json.loads(response.choices[0].message.content.strip())
    except openai.error.OpenAIError as e:
        logger.error(f"OpenAI API error: {e}")
        return {"error": "openai_error"}
    except json.JSONDecodeError as e:
        logger.error(f"JSON parsing error: {e}")
        return {"error": "invalid_json"}
    except Exception as e:
        logger.error(f"Unexpected error in analyze_film_text: {e}")
        return {"error": "unknown_error"}

async def on_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not update.message or not update.message.text:
        return

    text = update.message.text
    chat = update.effective_chat
    user = update.effective_user

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    if not any(k in text.lower() for k in ["—Ñ–∏–ª—å–º", "–∫–∏–Ω–æ", "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å", "—Ä–µ–∫–æ–º–µ–Ω–¥—É—é", "–ø—Ä–µ–¥–ª–∞–≥–∞—é", "—Å–æ–≤–µ—Ç—É—é", "movie", "film"]):
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    status_message = await update.message.reply_text(
        "üé¨ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ...",
        quote=True
    )

    try:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        result = await analyze_film_text(text)

        if "error" in result:
            error_messages = {
                "not_recognized": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–∏–ª—å–º –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏",
                "openai_error": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
                "invalid_json": "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö",
                "unknown_error": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
            }
            await status_message.edit_text(error_messages.get(result["error"], "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"))
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        cur.execute("""
            INSERT INTO movies_info (
                original_message, title, year, genres, actors,
                kinopoisk_rating, kinopoisk_link,
                imdb_rating, imdb_link, poster_url,
                added_by, chat_id
            ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
        """, (
            text,
            result["title"],
            result["year"],
            ", ".join(result["genres"]),
            ", ".join(result["actors"]),
            result["kinopoisk_rating"],
            result["kinopoisk_link"],
            result["imdb_rating"],
            result["imdb_link"],
            result["poster_url"],
            user.username,
            chat.id
        ))
        conn.commit()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        caption = f"""üé¨ *{result["title"]}* ({result["year"]})

üë• *–í —Ä–æ–ª—è—Ö:*
{", ".join(result["actors"])}

üé≠ *–ñ–∞–Ω—Ä—ã:*
{", ".join(result["genres"])}

‚≠êÔ∏è *–†–µ–π—Ç–∏–Ω–≥–∏:*
‚Ä¢ –ö–∏–Ω–æ–ü–æ–∏—Å–∫: {result["kinopoisk_rating"]} ‚Äî [–æ—Ç–∫—Ä—ã—Ç—å]({result["kinopoisk_link"]})
‚Ä¢ IMDb: {result["imdb_rating"]} ‚Äî [–æ—Ç–∫—Ä—ã—Ç—å]({result["imdb_link"]})

üéØ –ü—Ä–µ–¥–ª–æ–∂–∏–ª: @{user.username}"""

        try:
            await update.message.reply_photo(
                photo=result["poster_url"],
                caption=caption,
                parse_mode="Markdown"
            )
            await status_message.delete()
        except Exception as e:
            logger.error(f"Error sending photo: {e}")
            await status_message.edit_text(
                f"{caption}\n\n‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å—Ç–µ—Ä —Ñ–∏–ª—å–º–∞",
                parse_mode="Markdown"
            )

    except Exception as e:
        logger.error(f"Error processing message: {e}")
        await status_message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")

async def run_bot():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    application = None
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        await setup_database()
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = ApplicationBuilder().token(BOT_TOKEN).build()
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_message))
        
        logger.info("Starting bot...")
        await application.initialize()
        await application.start()
        logger.info("Bot is running...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await application.run_polling(allowed_updates=Update.ALL_TYPES)
        
    except Exception as e:
        logger.error(f"Error in run_bot: {e}")
        raise
    finally:
        try:
            if application and application.running:
                logger.info("Stopping bot...")
                await application.stop()
        except Exception as e:
            logger.error(f"Error stopping bot: {e}")
        finally:
            await cleanup_database()

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤
        for sig in (signal.SIGINT, signal.SIGTERM):
            signal.signal(sig, lambda s, f: sys.exit(0))
            
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        asyncio.run(run_bot())
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except SystemExit:
        logger.info("Bot stopped by system signal")
    except Exception as e:
        logger.error(f"Fatal error: {e}")

if __name__ == "__main__":
    main() 