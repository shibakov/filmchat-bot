import os
import json
import openai
import psycopg2
import asyncio
import logging
import sys
import signal
import traceback
from pathlib import Path
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç TelegramLogHandler
TELEGRAM_LOG_CHANNEL_ID = os.getenv("TELEGRAM_LOG_CHANNEL_ID")
if TELEGRAM_LOG_CHANNEL_ID:
    from src.telegram_log_handler import TelegramLogHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('bot.log')
    ]
)
logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–ª—è–µ–º Telegram handler –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω ID –∫–∞–Ω–∞–ª–∞
if TELEGRAM_LOG_CHANNEL_ID:
    BOT_TOKEN = os.getenv("BOT_TOKEN")
    telegram_handler = TelegramLogHandler(BOT_TOKEN, TELEGRAM_LOG_CHANNEL_ID)
    telegram_handler.setLevel(logging.INFO)
    telegram_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s\n%(message)s'))
    logger.addHandler(telegram_handler)
    logger.info("‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Telegram –∫–∞–Ω–∞–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ")

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
env_path = Path('.env')
if env_path.exists():
    load_dotenv()
    logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
REQUIRED_ENV_VARS = {
    "OPENAI_API_KEY": "OpenAI API –∫–ª—é—á",
    "BOT_TOKEN": "Telegram –±–æ—Ç —Ç–æ–∫–µ–Ω",
    "DATABASE_URL": "URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
}

missing_vars = [name for name in REQUIRED_ENV_VARS.keys() if not os.getenv(name)]
if missing_vars:
    missing_list = "\n".join(f"- {name}: {REQUIRED_ENV_VARS[name]}" for name in missing_vars)
    logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:\n{missing_list}")
    raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")

openai.api_key = os.getenv("OPENAI_API_KEY")
BOT_TOKEN = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ë–î
conn = None
cur = None

async def setup_database():
    global conn, cur
    try:
        logger.info("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        conn = psycopg2.connect(DATABASE_URL)
        cur = conn.cursor()
        
        cur.execute("""
        CREATE TABLE IF NOT EXISTS movies_info (
            id SERIAL PRIMARY KEY,
            original_message TEXT,
            title TEXT,
            year INT,
            genres TEXT,
            actors TEXT,
            kinopoisk_rating FLOAT,
            kinopoisk_link TEXT,
            imdb_rating FLOAT,
            imdb_link TEXT,
            poster_url TEXT,
            chat_id BIGINT,
            added_by TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        """)
        conn.commit()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        logger.debug(traceback.format_exc())
        raise

async def cleanup_database():
    global conn, cur
    try:
        if cur:
            cur.close()
        if conn:
            conn.close()
        logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ë–î: {e}")
        logger.debug(traceback.format_exc())

async def analyze_film_text(text):
    prompt = f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏ –≤—ã–¥–∞–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON. –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∏–ª—å–º–æ–≤, –≤—ã–±–µ—Ä–∏ –ø–µ—Ä–≤—ã–π:

"{text}"

–§–æ—Ä–º–∞—Ç:
{{
"title": "–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞",
"year": 1994,
"genres": ["–∂–∞–Ω—Ä1", "–∂–∞–Ω—Ä2"],
"actors": ["–ê–∫—Ç—ë—Ä 1", "–ê–∫—Ç—ë—Ä 2", "–ê–∫—Ç—ë—Ä 3"],
"kinopoisk_rating": 8.7,
"kinopoisk_link": "https://www.kinopoisk.ru/film/12345/",
"imdb_rating": 8.9,
"imdb_link": "https://www.imdb.com/title/tt1234567/",
"poster_url": "https://somecdn.com/poster.jpg"
}}

–ï—Å–ª–∏ —Ñ–∏–ª—å–º –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω ‚Äî –æ—Ç–≤–µ—Ç—å {{ "error": "not recognized" }}
–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–π–¥–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ IMDb –∏ –ö–∏–Ω–æ–ø–æ–∏—Å–∫.
"""
    try:
        logger.info("ü§ñ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ GPT...")
        response = await openai.ChatCompletion.acreate(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7
        )
        result = response.choices[0].message.content.strip()
        logger.info("‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç GPT")
        return json.loads(result)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ GPT: {e}")
        logger.debug(traceback.format_exc())
        return {"error": "gpt_fail"}

async def on_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return

    text = update.message.text
    chat = update.effective_chat
    user = update.effective_user
    
    logger.info(f"üì• –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.username}")

    if not any(k in text.lower() for k in ["—Ñ–∏–ª—å–º", "–∫–∏–Ω–æ", "movie", "film", "–ø—Ä–µ–¥–ª–∞–≥–∞—é", "—Ä–µ–∫–æ–º–µ–Ω–¥—É—é"]):
        return

    try:
        status = await update.message.reply_text("üé¨ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–∏–ª—å–º...", quote=True)
        
        result = await analyze_film_text(text)
        
        if "error" in result:
            error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–∏–ª—å–º –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏"
            logger.warning(error_msg)
            await status.edit_text(error_msg)
            return

        logger.info(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω —Ñ–∏–ª—å–º: {result['title']} ({result['year']})")
        
        try:
            cur.execute("""
                INSERT INTO movies_info (
                    original_message, title, year, genres, actors,
                    kinopoisk_rating, kinopoisk_link,
                    imdb_rating, imdb_link, poster_url,
                    added_by, chat_id
                ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
            """, (
                text,
                result["title"],
                result["year"],
                ", ".join(result["genres"]),
                ", ".join(result["actors"]),
                result["kinopoisk_rating"],
                result["kinopoisk_link"],
                result["imdb_rating"],
                result["imdb_link"],
                result["poster_url"],
                user.username,
                chat.id
            ))
            conn.commit()
            logger.info("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
            logger.debug(traceback.format_exc())
            await status.edit_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
            return

        caption = f"""üé¨ *{result["title"]}* ({result["year"]})

üë§ *–ê–∫—Ç—ë—Ä—ã:* {", ".join(result["actors"])}
üé≠ *–ñ–∞–Ω—Ä—ã:* {", ".join(result["genres"])}
‚≠êÔ∏è –ö–∏–Ω–æ–ü–æ–∏—Å–∫: {result["kinopoisk_rating"]} ‚Äî [—Å—Å—ã–ª–∫–∞]({result["kinopoisk_link"]})
‚≠êÔ∏è IMDb: {result["imdb_rating"]} ‚Äî [—Å—Å—ã–ª–∫–∞]({result["imdb_link"]})

üìé –ü—Ä–µ–¥–ª–æ–∂–∏–ª: @{user.username}"""

        try:
            await update.message.reply_photo(
                photo=result["poster_url"],
                caption=caption,
                parse_mode="Markdown"
            )
            await status.delete()
            logger.info("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            logger.debug(traceback.format_exc())
            await status.edit_text(caption + "\n\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å—Ç–µ—Ä", parse_mode="Markdown")
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}"
        logger.error(error_msg)
        logger.debug(traceback.format_exc())
        await status.edit_text(error_msg)

async def run_bot():
    try:
        await setup_database()
        
        app = ApplicationBuilder().token(BOT_TOKEN).build()
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_message))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
        def signal_handler(signum, frame):
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            asyncio.create_task(cleanup_database())
            app.stop()
        
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
        
        logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        await app.run_polling(allowed_updates=Update.ALL_TYPES)
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.debug(traceback.format_exc())
    finally:
        await cleanup_database()

if __name__ == "__main__":
    try:
        asyncio.run(run_bot())
    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"FATAL: {e}")
        logger.debug(traceback.format_exc()) 