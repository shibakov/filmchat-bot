import os
import json
import openai
import psycopg2
import asyncio
import logging
import sys
import signal
import traceback
import nest_asyncio
from pathlib import Path
from telegram import Update, Bot
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv
from logging.handlers import QueueHandler
from queue import Queue
import asyncio
from functools import partial
import threading
from datetime import datetime

# Apply nest_asyncio to allow nested event loops
nest_asyncio.apply()

class TelegramLogHandler(logging.Handler):
    def __init__(self, bot_token, channel_id):
        super().__init__()
        self.bot = Bot(bot_token)
        self.channel_id = channel_id
        self.queue = Queue()
        self.running = True
        self.worker_thread = threading.Thread(target=self._worker, daemon=True)
        self.worker_thread.start()
        
    def _worker(self):
        while self.running:
            try:
                if not self.queue.empty():
                    msg = self.queue.get()
                    # Create new event loop for this thread
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    # Send message
                    loop.run_until_complete(
                        self.bot.send_message(
                            chat_id=self.channel_id,
                            text=f"ü§ñ Log [{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}]:\n{msg}"
                        )
                    )
                    loop.close()
            except Exception as e:
                print(f"Error in log worker: {e}")
            finally:
                # Small sleep to prevent CPU overuse
                threading.Event().wait(0.1)
                
    def emit(self, record):
        try:
            msg = self.format(record)
            self.queue.put(msg)
        except Exception:
            self.handleError(record)
            
    def close(self):
        self.running = False
        if self.worker_thread.is_alive():
            self.worker_thread.join(timeout=2.0)
        super().close()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
TELEGRAM_LOG_CHANNEL_ID = os.getenv("TELEGRAM_LOG_CHANNEL_ID")

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('bot.log')
    ]
)

logger = logging.getLogger(__name__)

# .env (–µ—Å–ª–∏ –µ—Å—Ç—å)
env_path = Path('.env')
if env_path.exists():
    load_dotenv()
    logger.info("‚úÖ –§–∞–π–ª .env –∑–∞–≥—Ä—É–∂–µ–Ω")
else:
    logger.warning("‚ö†Ô∏è –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
openai.api_key = os.getenv("OPENAI_API_KEY")
BOT_TOKEN = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")

# –î–æ–±–∞–≤–ª—è–µ–º Telegram handler –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω ID –∫–∞–Ω–∞–ª–∞
if TELEGRAM_LOG_CHANNEL_ID:
    telegram_handler = TelegramLogHandler(BOT_TOKEN, TELEGRAM_LOG_CHANNEL_ID)
    telegram_handler.setLevel(logging.INFO)
    telegram_handler.setFormatter(logging.Formatter(
        '%(asctime)s - %(levelname)s\n%(message)s'
    ))
    logger.addHandler(telegram_handler)
    logger.info("‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Telegram –∫–∞–Ω–∞–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ")
else:
    logger.warning("‚ö†Ô∏è TELEGRAM_LOG_CHANNEL_ID –Ω–µ —É–∫–∞–∑–∞–Ω, –ª–æ–≥–∏ –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ Telegram")

logger.info("üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
logger.info(f"- OPENAI_API_KEY: {'‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if openai.api_key else '‚ùå –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
logger.info(f"- BOT_TOKEN: {'‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if BOT_TOKEN else '‚ùå –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
logger.info(f"- DATABASE_URL: {'‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if DATABASE_URL else '‚ùå –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
logger.info(f"- TELEGRAM_LOG_CHANNEL_ID: {'‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if TELEGRAM_LOG_CHANNEL_ID else '‚ùå –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")

if not all([openai.api_key, BOT_TOKEN, DATABASE_URL]):
    logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ë–î
conn = None
cur = None

async def setup_database():
    global conn, cur
    try:
        logger.info("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        conn = psycopg2.connect(DATABASE_URL)
        cur = conn.cursor()
        
        cur.execute("""
        CREATE TABLE IF NOT EXISTS movies_info (
            id SERIAL PRIMARY KEY,
            original_message TEXT,
            title TEXT,
            year INT,
            genres TEXT,
            actors TEXT,
            kinopoisk_rating FLOAT,
            kinopoisk_link TEXT,
            imdb_rating FLOAT,
            imdb_link TEXT,
            poster_url TEXT,
            added_by TEXT,
            chat_id BIGINT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        """)
        conn.commit()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        logger.error(traceback.format_exc())
        raise

async def cleanup_database():
    global conn, cur
    try:
        if cur: 
            cur.close()
        if conn: 
            conn.close()
        logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î: {e}")
        logger.error(traceback.format_exc())

async def analyze_film_text(text):
    prompt = f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏ –≤—ã–¥–∞–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON. –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∏–ª—å–º–æ–≤, –≤—ã–±–µ—Ä–∏ –ø–µ—Ä–≤—ã–π:

"{text}"

–§–æ—Ä–º–∞—Ç:
{{
"title": "–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞",
"year": 1994,
"genres": ["–∂–∞–Ω—Ä1", "–∂–∞–Ω—Ä2"],
"actors": ["–ê–∫—Ç—ë—Ä 1", "–ê–∫—Ç—ë—Ä 2", "–ê–∫—Ç—ë—Ä 3"],
"kinopoisk_rating": 8.7,
"kinopoisk_link": "https://www.kinopoisk.ru/film/12345/",
"imdb_rating": 8.9,
"imdb_link": "https://www.imdb.com/title/tt1234567/",
"poster_url": "https://somecdn.com/poster.jpg"
}}

–ï—Å–ª–∏ —Ñ–∏–ª—å–º –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω ‚Äî –æ—Ç–≤–µ—Ç—å {{ "error": "not recognized" }}
–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–π–¥–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ IMDb –∏ –ö–∏–Ω–æ–ø–æ–∏—Å–∫.
"""
    try:
        logger.info("ü§ñ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ GPT...")
        logger.debug(f"–¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞: {text}")
        
        response = await openai.ChatCompletion.acreate(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7
        )
        
        result = response.choices[0].message.content.strip()
        logger.info("‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç GPT")
        logger.debug(f"–û—Ç–≤–µ—Ç GPT: {result}")
        
        return json.loads(result)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ GPT –∑–∞–ø—Ä–æ—Å–∞: {e}")
        logger.error(traceback.format_exc())
        return {"error": "gpt_fail"}

async def on_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return

    text = update.message.text
    chat = update.effective_chat
    user = update.effective_user
    
    logger.info(f"üì• –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {chat.title or chat.id} / @{user.username}")
    logger.debug(f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {text}")

    if not any(k in text.lower() for k in ["—Ñ–∏–ª—å–º", "–∫–∏–Ω–æ", "movie", "film", "–ø—Ä–µ–¥–ª–∞–≥–∞—é", "—Ä–µ–∫–æ–º–µ–Ω–¥—É—é"]):
        return

    try:
        status = await update.message.reply_text("üé¨ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–∏–ª—å–º...", quote=True)
        logger.info("üîÑ –ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∏–ª—å–º–∞")
        
        result = await analyze_film_text(text)
        
        if "error" in result:
            error_msg = "‚ùå GPT –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–∏–ª—å–º"
            logger.warning(error_msg)
            await status.edit_text(error_msg)
            return

        logger.info(f"‚úÖ –§–∏–ª—å–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω: {result['title']} ({result['year']})")
        
        try:
            cur.execute("""
                INSERT INTO movies_info (
                    original_message, title, year, genres, actors,
                    kinopoisk_rating, kinopoisk_link,
                    imdb_rating, imdb_link, poster_url,
                    added_by, chat_id
                ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
            """, (
                text,
                result["title"],
                result["year"],
                ", ".join(result["genres"]),
                ", ".join(result["actors"]),
                result["kinopoisk_rating"],
                result["kinopoisk_link"],
                result["imdb_rating"],
                result["imdb_link"],
                result["poster_url"],
                user.username,
                chat.id
            ))
            conn.commit()
            logger.info("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î: {e}")
            logger.error(traceback.format_exc())

        caption = f"""üé¨ *{result["title"]}* ({result["year"]})

üë§ *–ê–∫—Ç—ë—Ä—ã:* {", ".join(result["actors"])}
üé≠ *–ñ–∞–Ω—Ä—ã:* {", ".join(result["genres"])}
‚≠êÔ∏è –ö–∏–Ω–æ–ü–æ–∏—Å–∫: {result["kinopoisk_rating"]} ‚Äî [—Å—Å—ã–ª–∫–∞]({result["kinopoisk_link"]})
‚≠êÔ∏è IMDb: {result["imdb_rating"]} ‚Äî [—Å—Å—ã–ª–∫–∞]({result["imdb_link"]})

üìé –ü—Ä–µ–¥–ª–æ–∂–∏–ª: @{user.username}
"""
        try:
            await update.message.reply_photo(
                photo=result["poster_url"],
                caption=caption,
                parse_mode="Markdown"
            )
            await status.delete()
            logger.info("‚úÖ –û—Ç–≤–µ—Ç —Å –ø–æ—Å—Ç–µ—Ä–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–µ—Ä–∞: {e}")
            logger.error(traceback.format_exc())
            await status.edit_text(caption + "\n\n‚ö†Ô∏è –ü–æ—Å—Ç–µ—Ä –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å", parse_mode="Markdown")
            
    except Exception as e:
        error_msg = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}"
        logger.error(error_msg)
        logger.error(traceback.format_exc())
        await status.edit_text(error_msg)

async def run_bot():
    try:
        await setup_database()
        app = ApplicationBuilder().token(BOT_TOKEN).build()
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_message))
        
        logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        await app.run_polling()
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.error(traceback.format_exc())
    finally:
        await cleanup_database()

if __name__ == "__main__":
    try:
        asyncio.run(run_bot())
    except Exception as e:
        logger.error(f"FATAL: {e}")
        logger.error(traceback.format_exc()) 